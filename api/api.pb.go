// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Empty
	Error
	Task
	TaskArray
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Error_ErrorType int32

const (
	Error_SUCCESS Error_ErrorType = 0
	Error_FAIL    Error_ErrorType = 1
)

var Error_ErrorType_name = map[int32]string{
	0: "SUCCESS",
	1: "FAIL",
}
var Error_ErrorType_value = map[string]int32{
	"SUCCESS": 0,
	"FAIL":    1,
}

func (x Error_ErrorType) String() string {
	return proto.EnumName(Error_ErrorType_name, int32(x))
}
func (Error_ErrorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Task_Priority int32

const (
	Task_LOW    Task_Priority = 0
	Task_MEDIUM Task_Priority = 1
	Task_HIGH   Task_Priority = 2
)

var Task_Priority_name = map[int32]string{
	0: "LOW",
	1: "MEDIUM",
	2: "HIGH",
}
var Task_Priority_value = map[string]int32{
	"LOW":    0,
	"MEDIUM": 1,
	"HIGH":   2,
}

func (x Task_Priority) String() string {
	return proto.EnumName(Task_Priority_name, int32(x))
}
func (Task_Priority) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Task_Status int32

const (
	Task_TODO       Task_Status = 0
	Task_INPROGRESS Task_Status = 1
	Task_DONE       Task_Status = 2
)

var Task_Status_name = map[int32]string{
	0: "TODO",
	1: "INPROGRESS",
	2: "DONE",
}
var Task_Status_value = map[string]int32{
	"TODO":       0,
	"INPROGRESS": 1,
	"DONE":       2,
}

func (x Task_Status) String() string {
	return proto.EnumName(Task_Status_name, int32(x))
}
func (Task_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Error struct {
	Type        Error_ErrorType `protobuf:"varint,1,opt,name=type,enum=api.Error_ErrorType" json:"type,omitempty"`
	Description string          `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Error) GetType() Error_ErrorType {
	if m != nil {
		return m.Type
	}
	return Error_SUCCESS
}

func (m *Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Task struct {
	Uid      int32         `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Start    int64         `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	End      int64         `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`
	Priority Task_Priority `protobuf:"varint,4,opt,name=priority,enum=api.Task_Priority" json:"priority,omitempty"`
	Status   Task_Status   `protobuf:"varint,5,opt,name=status,enum=api.Task_Status" json:"status,omitempty"`
	Subject  string        `protobuf:"bytes,6,opt,name=subject" json:"subject,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Task) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Task) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Task) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Task) GetPriority() Task_Priority {
	if m != nil {
		return m.Priority
	}
	return Task_LOW
}

func (m *Task) GetStatus() Task_Status {
	if m != nil {
		return m.Status
	}
	return Task_TODO
}

func (m *Task) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

type TaskArray struct {
	Tasks []*Task `protobuf:"bytes,1,rep,name=Tasks" json:"Tasks,omitempty"`
}

func (m *TaskArray) Reset()                    { *m = TaskArray{} }
func (m *TaskArray) String() string            { return proto.CompactTextString(m) }
func (*TaskArray) ProtoMessage()               {}
func (*TaskArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TaskArray) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "api.Empty")
	proto.RegisterType((*Error)(nil), "api.Error")
	proto.RegisterType((*Task)(nil), "api.Task")
	proto.RegisterType((*TaskArray)(nil), "api.TaskArray")
	proto.RegisterEnum("api.Error_ErrorType", Error_ErrorType_name, Error_ErrorType_value)
	proto.RegisterEnum("api.Task_Priority", Task_Priority_name, Task_Priority_value)
	proto.RegisterEnum("api.Task_Status", Task_Status_name, Task_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ToDoApi service

type ToDoApiClient interface {
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskArray, error)
	Create(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Error, error)
	Update(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Error, error)
	Delete(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Error, error)
}

type toDoApiClient struct {
	cc *grpc.ClientConn
}

func NewToDoApiClient(cc *grpc.ClientConn) ToDoApiClient {
	return &toDoApiClient{cc}
}

func (c *toDoApiClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskArray, error) {
	out := new(TaskArray)
	err := grpc.Invoke(ctx, "/api.ToDoApi/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoApiClient) Create(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := grpc.Invoke(ctx, "/api.ToDoApi/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoApiClient) Update(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := grpc.Invoke(ctx, "/api.ToDoApi/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoApiClient) Delete(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := grpc.Invoke(ctx, "/api.ToDoApi/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ToDoApi service

type ToDoApiServer interface {
	List(context.Context, *Empty) (*TaskArray, error)
	Create(context.Context, *Task) (*Error, error)
	Update(context.Context, *Task) (*Error, error)
	Delete(context.Context, *Task) (*Error, error)
}

func RegisterToDoApiServer(s *grpc.Server, srv ToDoApiServer) {
	s.RegisterService(&_ToDoApi_serviceDesc, srv)
}

func _ToDoApi_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoApiServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ToDoApi/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoApiServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoApi_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ToDoApi/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoApiServer).Create(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoApi_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoApiServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ToDoApi/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoApiServer).Update(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoApi_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoApiServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ToDoApi/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoApiServer).Delete(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

var _ToDoApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ToDoApi",
	HandlerType: (*ToDoApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ToDoApi_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ToDoApi_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ToDoApi_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ToDoApi_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xbf, 0x6e, 0xdb, 0x30,
	0x10, 0xc6, 0x2d, 0xeb, 0x9f, 0x75, 0x06, 0x0c, 0xe2, 0x90, 0x81, 0xc8, 0x52, 0x97, 0xe8, 0xa0,
	0x02, 0x85, 0x07, 0xf7, 0x09, 0x0c, 0x4b, 0x4d, 0x0c, 0x38, 0x51, 0x40, 0xc9, 0xe8, 0xac, 0x44,
	0x1c, 0xd8, 0x3f, 0x11, 0x41, 0xd2, 0x28, 0xf4, 0x10, 0xdd, 0xfb, 0xb8, 0x05, 0xa9, 0x44, 0xee,
	0xd4, 0x2c, 0x02, 0xef, 0xbb, 0xdf, 0x7d, 0xfa, 0xa8, 0x13, 0x64, 0xad, 0x92, 0x1b, 0xa5, 0x7b,
	0xdb, 0x63, 0xd8, 0x2a, 0xc9, 0x52, 0x88, 0xcb, 0x9f, 0xca, 0x0e, 0xec, 0x17, 0xc4, 0xa5, 0xd6,
	0xbd, 0xc6, 0x1c, 0x22, 0x3b, 0x28, 0x41, 0x83, 0x75, 0x90, 0xaf, 0xb6, 0x57, 0x1b, 0x37, 0xe0,
	0x3b, 0xe3, 0xb3, 0x19, 0x94, 0xe0, 0x9e, 0xc0, 0x35, 0x2c, 0x3b, 0x61, 0x9e, 0xb4, 0x54, 0x56,
	0xf6, 0xcf, 0x74, 0xbe, 0x0e, 0xf2, 0x8c, 0xff, 0x2b, 0x31, 0x06, 0xd9, 0x34, 0x84, 0x4b, 0x48,
	0xeb, 0xd3, 0x7e, 0x5f, 0xd6, 0x35, 0x99, 0xe1, 0x02, 0xa2, 0x2f, 0xbb, 0xc3, 0x91, 0x04, 0xec,
	0xf7, 0x1c, 0xa2, 0xa6, 0x35, 0xdf, 0x91, 0x40, 0x78, 0x96, 0x9d, 0x7f, 0x6f, 0xcc, 0xdd, 0x11,
	0xaf, 0x20, 0x36, 0xb6, 0xd5, 0xd6, 0x5b, 0x87, 0x7c, 0x2c, 0x1c, 0x27, 0x9e, 0x3b, 0x1a, 0x7a,
	0xcd, 0x1d, 0x71, 0x03, 0x0b, 0xa5, 0x65, 0xaf, 0xa5, 0x1d, 0x68, 0xe4, 0x63, 0xa3, 0x8f, 0xed,
	0x6c, 0x37, 0x0f, 0x2f, 0x1d, 0x3e, 0x31, 0x98, 0x43, 0x62, 0x6c, 0x6b, 0xcf, 0x86, 0xc6, 0x9e,
	0x26, 0x17, 0xba, 0xf6, 0x3a, 0x7f, 0xe9, 0x23, 0x85, 0xd4, 0x9c, 0x1f, 0xbf, 0x89, 0x27, 0x4b,
	0x13, 0x7f, 0xbd, 0xd7, 0x92, 0x7d, 0x84, 0xc5, 0xab, 0x33, 0xa6, 0x10, 0x1e, 0xab, 0xaf, 0x64,
	0x86, 0x00, 0xc9, 0x5d, 0x59, 0x1c, 0x4e, 0x77, 0x24, 0x70, 0x37, 0xbc, 0x3d, 0xdc, 0xdc, 0x92,
	0x39, 0xfb, 0x04, 0xc9, 0x68, 0xeb, 0xb4, 0xa6, 0x2a, 0x2a, 0x32, 0xc3, 0x15, 0xc0, 0xe1, 0xfe,
	0x81, 0x57, 0x37, 0xdc, 0x7d, 0x0f, 0x4f, 0x17, 0xd5, 0x7d, 0xe9, 0xe9, 0xcc, 0x25, 0xd9, 0x69,
	0xdd, 0x0e, 0xf8, 0x0e, 0x62, 0x57, 0x18, 0x1a, 0xac, 0xc3, 0x7c, 0xb9, 0xcd, 0xa6, 0xa0, 0x7c,
	0xd4, 0xb7, 0x7f, 0x02, 0x48, 0x9b, 0xbe, 0xe8, 0x77, 0x4a, 0xe2, 0x07, 0x88, 0x8e, 0xd2, 0x58,
	0x84, 0x71, 0x67, 0x6e, 0xad, 0xd7, 0xab, 0x69, 0xc2, 0x1b, 0xb2, 0x19, 0xbe, 0x87, 0x64, 0xaf,
	0x45, 0x6b, 0x05, 0x5e, 0xdc, 0xae, 0xe1, 0xb2, 0xe6, 0x11, 0x39, 0xa9, 0xee, 0x2d, 0xa4, 0x10,
	0x3f, 0xc4, 0x7f, 0x90, 0xc7, 0xc4, 0xff, 0x66, 0x9f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x25,
	0xf5, 0x51, 0x17, 0x73, 0x02, 0x00, 0x00,
}
